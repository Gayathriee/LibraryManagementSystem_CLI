using System;
using Xunit;
using LibraryManagementSystem_CLI_CB010801;
using LibraryManagementSystem_CLI_CB01801.APP;
using System.Net.NetworkInformation;
using LibraryManagementSystem_CLI_CB01801.Interface;
using System.Net;
using LibraryManagementSystem_CLI_CB01801.Domain.UI;
using LibraryManagementSystem_CLI_CB01801.Domain;

namespace UnitTestProject
{

    //================================================MEMBER CLASS TETSINGS================================
    public class LibraryManagementSystemUnitTests

    {


        [Fact]
        public void MemberTests()
        {
            // Arrange
            Member member = new Member("Test Member", "testmember@email.com", "Test Department");

            // Act
            bool result1 = member.IncrementNumberOfLoans();
            bool result2 = member.IncrementNumberOfLoans();
            bool result3 = member.IncrementNumberOfLoans();
            bool result4 = member.IncrementNumberOfLoans();
            bool result5 = member.IncrementNumberOfLoans();
            bool result6 = member.IncrementNumberOfLoans();
            bool result7 = member.IncrementNumberOfLoans();

            // Assert
            Assert.True(result1);
            Assert.True(result2);
            Assert.True(result3);
            Assert.True(result4);
            Assert.True(result5);
            Assert.True(result6);
            Assert.False(result7);
            Assert.Equal(member.numberOfLoans, 6);

            // Act
            bool result8 = member.DecrementNumberOfLoans();
            bool result9 = member.DecrementNumberOfLoans();
            bool result10 = member.DecrementNumberOfLoans();

            // Assert
            Assert.True(result8);
            Assert.True(result9);
            Assert.True(result10);
            Assert.Equal(member.numberOfLoans, 3);
        }

        //=================================================================BOOK CLASS TETSINGS===================================================
        public class BookTests
        {
            [Fact]
            public void TestBook()
            {
                // Arrange
                Book book = new Book("Test Author", "1234567890", "Test Title");

                // Act
                book.MarkasAvaialble();
                book.MarkAsOnLoan();

                // Assert
                Assert.Equal(book.Status, "On Loan");

                // Act
                book.MarkasAvaialble();

                // Assert
                Assert.Equal(book.Status, "Available");
            }

        }


        //===================================================LIBRARIAN_UI_TESTING====================================================================

        public class Librarian_UI_Tests
        {
            private BookManager bookMgr;
            private LoanManager loanMgr;
            private Librarian_UI librarianUI;

            public Librarian_UI_Tests()
            {
                bookMgr = new BookManager();
                loanMgr = new LoanManager();
                librarianUI = new Librarian_UI(bookMgr, loanMgr);
            }

            [Fact]
            public void TestViewAllBooks()
            {
                // Arrange
                List<Book> expectedBooks = new List<Book>
        {
            new Book("Author1", "ISBN1", "Title1"),
            new Book("Author2", "ISBN2", "Title2"),
            new Book("Author3", "ISBN3", "Title3")
        };

                // Act
                List<Book> actualBooks = librarianUI.ViewAllBooks();

                // Assert
                Assert.Equal(expectedBooks.Count, actualBooks.Count);
                for (int i = 0; i < expectedBooks.Count; i++)
                {
                    Assert.Equal(expectedBooks[i].Author, actualBooks[i].Author);
                    Assert.Equal(expectedBooks[i].ISBN, actualBooks[i].ISBN);
                    Assert.Equal(expectedBooks[i].Title, actualBooks[i].Title);
                }
            }
        }


        //=====================================================LOAN CLASS TESTINGS=========================================================================
        public class LoanTests
        {
            [Fact]
            public void TestLoanCreation()
            {
                // Arrange
                Member member = new Member("John Doe", "johndoe@example.com", "Department");
                Book book = new Book("Author", "ISBN", "Title");
                DateTime loanDate = DateTime.Now;

                // Act
                Loan loan = new Loan(member, book, loanDate);

                // Assert
                Assert.NotNull(loan);

                Assert.Equal(member, loan.Member);
                Assert.Equal(book, loan.Book);
                Assert.Equal(loanDate.AddDays(14), loan.DueDate);
                Assert.Equal(loanDate, loan.LoanDate);
                Assert.Equal(0, loan.NumberOfRenewals);
                Assert.Equal(DateTime.MinValue, loan.DueDate);
            }

            [Fact]
            public void TestLoanRenewal()
            {
                // Arrange
                Member member = new Member("Jane Doe", "janedoe@example.com", "Department");
                Book book = new Book("Author", "ISBN", "Title");
                DateTime loanDate = DateTime.Now;

                Loan loan = new Loan(member, book, loanDate);

                // Act
                bool result = loan.Renew();

                // Assert
                Assert.True(result);
            }

            [Fact]
            public void TestLoanRenewalLimit()
            {
                // Arrange
                Member member = new Member("Jim Doe", "jimdoe@example.com", "Department");
                Book book = new Book("Author", "ISBN", "Title");
                DateTime loanDate = DateTime.Now;

                Loan loan = new Loan(member, book, loanDate);

                // Act
                loan.Renew();
                loan.Renew();
                loan.Renew();

                bool result = loan.Renew();

                // Assert
                Assert.False(result);
                Assert.Equal(loanDate.AddDays(14 * 3), loan.DueDate);
                Assert.Equal(3, loan.NumberOfRenewals);
            }
        }



        //====================================================================Library APP  CLASS TESTING =============================================================
        public class LibraryAPPTests
        {
            [Fact]
            public void TestBorrowBook()
            {
                // Arrange
                LibraryAPP libraryApp = new LibraryAPP(); 
                int memberId = 1;
                int bookId = 1;

                // Act
                bool borrowResult = libraryApp.BorrowBook(memberId, bookId);

                // Assert
                Assert.True(borrowResult); 
            }
        }

    }
}


    
